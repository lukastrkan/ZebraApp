/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// SettingResponse
    /// </summary>
    [DataContract(Name = "SettingResponse")]
    public partial class SettingResponse : IValidatableObject
    {

        /// <summary>
        /// Setting type. This corresponds with JSON types.
        /// </summary>
        /// <value>Setting type. This corresponds with JSON types.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public SettingType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SettingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingResponse" /> class.
        /// </summary>
        /// <param name="value">Setting value. (required).</param>
        /// <param name="isSet">Whether the setting has been set. If false, &#39;value&#39; contains the default value. (required).</param>
        /// <param name="type">Setting type. This corresponds with JSON types. (required).</param>
        public SettingResponse(string value = default(string), bool isSet = default(bool), SettingType type = default(SettingType))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for SettingResponse and cannot be null");
            }
            this.Value = value;
            this.IsSet = isSet;
            this.Type = type;
        }

        /// <summary>
        /// Setting value.
        /// </summary>
        /// <value>Setting value.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Whether the setting has been set. If false, &#39;value&#39; contains the default value.
        /// </summary>
        /// <value>Whether the setting has been set. If false, &#39;value&#39; contains the default value.</value>
        [DataMember(Name = "is_set", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SettingResponse {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  IsSet: ").Append(IsSet).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
