/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// ExternalMaterial
    /// </summary>
    [DataContract(Name = "ExternalMaterial")]
    public partial class ExternalMaterial : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalMaterial" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalMaterial() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalMaterial" /> class.
        /// </summary>
        /// <param name="material">material (required).</param>
        /// <param name="density">density (required).</param>
        /// <param name="extruderTemp">extruderTemp.</param>
        /// <param name="bedTemp">bedTemp.</param>
        public ExternalMaterial(string material = default(string), decimal density = default(decimal), int? extruderTemp = default(int?), int? bedTemp = default(int?))
        {
            // to ensure "material" is required (not null)
            if (material == null)
            {
                throw new ArgumentNullException("material is a required property for ExternalMaterial and cannot be null");
            }
            this.Material = material;
            this.Density = density;
            this.ExtruderTemp = extruderTemp;
            this.BedTemp = bedTemp;
        }

        /// <summary>
        /// Gets or Sets Material
        /// </summary>
        [DataMember(Name = "material", IsRequired = true, EmitDefaultValue = true)]
        public string Material { get; set; }

        /// <summary>
        /// Gets or Sets Density
        /// </summary>
        [DataMember(Name = "density", IsRequired = true, EmitDefaultValue = true)]
        public decimal Density { get; set; }

        /// <summary>
        /// Gets or Sets ExtruderTemp
        /// </summary>
        [DataMember(Name = "extruder_temp", EmitDefaultValue = true)]
        public int? ExtruderTemp { get; set; }

        /// <summary>
        /// Gets or Sets BedTemp
        /// </summary>
        [DataMember(Name = "bed_temp", EmitDefaultValue = true)]
        public int? BedTemp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalMaterial {\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Density: ").Append(Density).Append("\n");
            sb.Append("  ExtruderTemp: ").Append(ExtruderTemp).Append("\n");
            sb.Append("  BedTemp: ").Append(BedTemp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
