/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// SpoolUseParameters
    /// </summary>
    [DataContract(Name = "SpoolUseParameters")]
    public partial class SpoolUseParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolUseParameters" /> class.
        /// </summary>
        /// <param name="useLength">useLength.</param>
        /// <param name="useWeight">useWeight.</param>
        public SpoolUseParameters(decimal? useLength = default(decimal?), decimal? useWeight = default(decimal?))
        {
            this.UseLength = useLength;
            this.UseWeight = useWeight;
        }

        /// <summary>
        /// Gets or Sets UseLength
        /// </summary>
        [DataMember(Name = "use_length", EmitDefaultValue = true)]
        public decimal? UseLength { get; set; }

        /// <summary>
        /// Gets or Sets UseWeight
        /// </summary>
        [DataMember(Name = "use_weight", EmitDefaultValue = true)]
        public decimal? UseWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpoolUseParameters {\n");
            sb.Append("  UseLength: ").Append(UseLength).Append("\n");
            sb.Append("  UseWeight: ").Append(UseWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
