/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// ExternalFilament
    /// </summary>
    [DataContract(Name = "ExternalFilament")]
    public partial class ExternalFilament : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SpoolType
        /// </summary>
        [DataMember(Name = "spool_type", EmitDefaultValue = true)]
        public SpoolType? SpoolType { get; set; }

        /// <summary>
        /// Gets or Sets Finish
        /// </summary>
        [DataMember(Name = "finish", EmitDefaultValue = true)]
        public Finish? Finish { get; set; }

        /// <summary>
        /// Gets or Sets MultiColorDirection
        /// </summary>
        [DataMember(Name = "multi_color_direction", EmitDefaultValue = true)]
        public SpoolmanExternaldbMultiColorDirection? MultiColorDirection { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name = "pattern", EmitDefaultValue = true)]
        public Pattern? Pattern { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalFilament" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExternalFilament() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalFilament" /> class.
        /// </summary>
        /// <param name="id">A unique ID for this filament. (required).</param>
        /// <param name="manufacturer">Filament manufacturer. (required).</param>
        /// <param name="name">Filament name. (required).</param>
        /// <param name="material">Filament material. (required).</param>
        /// <param name="density">Density in g/cm3. (required).</param>
        /// <param name="weight">Net weight of a single spool. (required).</param>
        /// <param name="spoolWeight">spoolWeight.</param>
        /// <param name="spoolType">spoolType.</param>
        /// <param name="diameter">Filament in mm. (required).</param>
        /// <param name="colorHex">colorHex.</param>
        /// <param name="colorHexes">colorHexes.</param>
        /// <param name="extruderTemp">extruderTemp.</param>
        /// <param name="bedTemp">bedTemp.</param>
        /// <param name="finish">finish.</param>
        /// <param name="multiColorDirection">multiColorDirection.</param>
        /// <param name="pattern">pattern.</param>
        /// <param name="translucent">Whether the filament is translucent. (default to false).</param>
        /// <param name="glow">Whether the filament is glow-in-the-dark. (default to false).</param>
        public ExternalFilament(string id = default(string), string manufacturer = default(string), string name = default(string), string material = default(string), decimal density = default(decimal), decimal weight = default(decimal), decimal? spoolWeight = default(decimal?), SpoolType? spoolType = default(SpoolType?), decimal diameter = default(decimal), string colorHex = default(string), List<string> colorHexes = default(List<string>), int? extruderTemp = default(int?), int? bedTemp = default(int?), Finish? finish = default(Finish?), SpoolmanExternaldbMultiColorDirection? multiColorDirection = default(SpoolmanExternaldbMultiColorDirection?), Pattern? pattern = default(Pattern?), bool translucent = false, bool glow = false)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ExternalFilament and cannot be null");
            }
            this.Id = id;
            // to ensure "manufacturer" is required (not null)
            if (manufacturer == null)
            {
                throw new ArgumentNullException("manufacturer is a required property for ExternalFilament and cannot be null");
            }
            this.Manufacturer = manufacturer;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ExternalFilament and cannot be null");
            }
            this.Name = name;
            // to ensure "material" is required (not null)
            if (material == null)
            {
                throw new ArgumentNullException("material is a required property for ExternalFilament and cannot be null");
            }
            this.Material = material;
            this.Density = density;
            this.Weight = weight;
            this.Diameter = diameter;
            this.SpoolWeight = spoolWeight;
            this.SpoolType = spoolType;
            this.ColorHex = colorHex;
            this.ColorHexes = colorHexes;
            this.ExtruderTemp = extruderTemp;
            this.BedTemp = bedTemp;
            this.Finish = finish;
            this.MultiColorDirection = multiColorDirection;
            this.Pattern = pattern;
            this.Translucent = translucent;
            this.Glow = glow;
        }

        /// <summary>
        /// A unique ID for this filament.
        /// </summary>
        /// <value>A unique ID for this filament.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Filament manufacturer.
        /// </summary>
        /// <value>Filament manufacturer.</value>
        [DataMember(Name = "manufacturer", IsRequired = true, EmitDefaultValue = true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Filament name.
        /// </summary>
        /// <value>Filament name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Filament material.
        /// </summary>
        /// <value>Filament material.</value>
        [DataMember(Name = "material", IsRequired = true, EmitDefaultValue = true)]
        public string Material { get; set; }

        /// <summary>
        /// Density in g/cm3.
        /// </summary>
        /// <value>Density in g/cm3.</value>
        [DataMember(Name = "density", IsRequired = true, EmitDefaultValue = true)]
        public decimal Density { get; set; }

        /// <summary>
        /// Net weight of a single spool.
        /// </summary>
        /// <value>Net weight of a single spool.</value>
        [DataMember(Name = "weight", IsRequired = true, EmitDefaultValue = true)]
        public decimal Weight { get; set; }

        /// <summary>
        /// Gets or Sets SpoolWeight
        /// </summary>
        [DataMember(Name = "spool_weight", EmitDefaultValue = true)]
        public decimal? SpoolWeight { get; set; }

        /// <summary>
        /// Filament in mm.
        /// </summary>
        /// <value>Filament in mm.</value>
        [DataMember(Name = "diameter", IsRequired = true, EmitDefaultValue = true)]
        public decimal Diameter { get; set; }

        /// <summary>
        /// Gets or Sets ColorHex
        /// </summary>
        [DataMember(Name = "color_hex", EmitDefaultValue = true)]
        public string ColorHex { get; set; }

        /// <summary>
        /// Gets or Sets ColorHexes
        /// </summary>
        [DataMember(Name = "color_hexes", EmitDefaultValue = true)]
        public List<string> ColorHexes { get; set; }

        /// <summary>
        /// Gets or Sets ExtruderTemp
        /// </summary>
        [DataMember(Name = "extruder_temp", EmitDefaultValue = true)]
        public int? ExtruderTemp { get; set; }

        /// <summary>
        /// Gets or Sets BedTemp
        /// </summary>
        [DataMember(Name = "bed_temp", EmitDefaultValue = true)]
        public int? BedTemp { get; set; }

        /// <summary>
        /// Whether the filament is translucent.
        /// </summary>
        /// <value>Whether the filament is translucent.</value>
        [DataMember(Name = "translucent", EmitDefaultValue = true)]
        public bool Translucent { get; set; }

        /// <summary>
        /// Whether the filament is glow-in-the-dark.
        /// </summary>
        /// <value>Whether the filament is glow-in-the-dark.</value>
        [DataMember(Name = "glow", EmitDefaultValue = true)]
        public bool Glow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExternalFilament {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Density: ").Append(Density).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  SpoolWeight: ").Append(SpoolWeight).Append("\n");
            sb.Append("  SpoolType: ").Append(SpoolType).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  ColorHex: ").Append(ColorHex).Append("\n");
            sb.Append("  ColorHexes: ").Append(ColorHexes).Append("\n");
            sb.Append("  ExtruderTemp: ").Append(ExtruderTemp).Append("\n");
            sb.Append("  BedTemp: ").Append(BedTemp).Append("\n");
            sb.Append("  Finish: ").Append(Finish).Append("\n");
            sb.Append("  MultiColorDirection: ").Append(MultiColorDirection).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Translucent: ").Append(Translucent).Append("\n");
            sb.Append("  Glow: ").Append(Glow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
