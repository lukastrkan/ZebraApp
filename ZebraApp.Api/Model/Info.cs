/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// Info
    /// </summary>
    [DataContract(Name = "Info")]
    public partial class Info : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Info" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Info() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Info" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="debugMode">debugMode (required).</param>
        /// <param name="automaticBackups">automaticBackups (required).</param>
        /// <param name="dataDir">dataDir (required).</param>
        /// <param name="logsDir">logsDir (required).</param>
        /// <param name="backupsDir">backupsDir (required).</param>
        /// <param name="dbType">dbType (required).</param>
        /// <param name="gitCommit">gitCommit.</param>
        /// <param name="buildDate">buildDate.</param>
        public Info(string varVersion = default(string), bool debugMode = default(bool), bool automaticBackups = default(bool), string dataDir = default(string), string logsDir = default(string), string backupsDir = default(string), string dbType = default(string), string gitCommit = default(string), string buildDate = default(string))
        {
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for Info and cannot be null");
            }
            this.VarVersion = varVersion;
            this.DebugMode = debugMode;
            this.AutomaticBackups = automaticBackups;
            // to ensure "dataDir" is required (not null)
            if (dataDir == null)
            {
                throw new ArgumentNullException("dataDir is a required property for Info and cannot be null");
            }
            this.DataDir = dataDir;
            // to ensure "logsDir" is required (not null)
            if (logsDir == null)
            {
                throw new ArgumentNullException("logsDir is a required property for Info and cannot be null");
            }
            this.LogsDir = logsDir;
            // to ensure "backupsDir" is required (not null)
            if (backupsDir == null)
            {
                throw new ArgumentNullException("backupsDir is a required property for Info and cannot be null");
            }
            this.BackupsDir = backupsDir;
            // to ensure "dbType" is required (not null)
            if (dbType == null)
            {
                throw new ArgumentNullException("dbType is a required property for Info and cannot be null");
            }
            this.DbType = dbType;
            this.GitCommit = gitCommit;
            this.BuildDate = buildDate;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets DebugMode
        /// </summary>
        [DataMember(Name = "debug_mode", IsRequired = true, EmitDefaultValue = true)]
        public bool DebugMode { get; set; }

        /// <summary>
        /// Gets or Sets AutomaticBackups
        /// </summary>
        [DataMember(Name = "automatic_backups", IsRequired = true, EmitDefaultValue = true)]
        public bool AutomaticBackups { get; set; }

        /// <summary>
        /// Gets or Sets DataDir
        /// </summary>
        [DataMember(Name = "data_dir", IsRequired = true, EmitDefaultValue = true)]
        public string DataDir { get; set; }

        /// <summary>
        /// Gets or Sets LogsDir
        /// </summary>
        [DataMember(Name = "logs_dir", IsRequired = true, EmitDefaultValue = true)]
        public string LogsDir { get; set; }

        /// <summary>
        /// Gets or Sets BackupsDir
        /// </summary>
        [DataMember(Name = "backups_dir", IsRequired = true, EmitDefaultValue = true)]
        public string BackupsDir { get; set; }

        /// <summary>
        /// Gets or Sets DbType
        /// </summary>
        [DataMember(Name = "db_type", IsRequired = true, EmitDefaultValue = true)]
        public string DbType { get; set; }

        /// <summary>
        /// Gets or Sets GitCommit
        /// </summary>
        [DataMember(Name = "git_commit", EmitDefaultValue = true)]
        public string GitCommit { get; set; }

        /// <summary>
        /// Gets or Sets BuildDate
        /// </summary>
        [DataMember(Name = "build_date", EmitDefaultValue = true)]
        public string BuildDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Info {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  DebugMode: ").Append(DebugMode).Append("\n");
            sb.Append("  AutomaticBackups: ").Append(AutomaticBackups).Append("\n");
            sb.Append("  DataDir: ").Append(DataDir).Append("\n");
            sb.Append("  LogsDir: ").Append(LogsDir).Append("\n");
            sb.Append("  BackupsDir: ").Append(BackupsDir).Append("\n");
            sb.Append("  DbType: ").Append(DbType).Append("\n");
            sb.Append("  GitCommit: ").Append(GitCommit).Append("\n");
            sb.Append("  BuildDate: ").Append(BuildDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
