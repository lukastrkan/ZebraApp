/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// VendorParameters
    /// </summary>
    [DataContract(Name = "VendorParameters")]
    public partial class VendorParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorParameters" /> class.
        /// </summary>
        /// <param name="name">Vendor name. (required).</param>
        /// <param name="comment">comment.</param>
        /// <param name="emptySpoolWeight">emptySpoolWeight.</param>
        /// <param name="externalId">externalId.</param>
        /// <param name="extra">extra.</param>
        public VendorParameters(string name = default(string), string comment = default(string), decimal? emptySpoolWeight = default(decimal?), string externalId = default(string), Dictionary<string, string> extra = default(Dictionary<string, string>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for VendorParameters and cannot be null");
            }
            this.Name = name;
            this.Comment = comment;
            this.EmptySpoolWeight = emptySpoolWeight;
            this.ExternalId = externalId;
            this.Extra = extra;
        }

        /// <summary>
        /// Vendor name.
        /// </summary>
        /// <value>Vendor name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets EmptySpoolWeight
        /// </summary>
        [DataMember(Name = "empty_spool_weight", EmitDefaultValue = true)]
        public decimal? EmptySpoolWeight { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [DataMember(Name = "external_id", EmitDefaultValue = true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Extra
        /// </summary>
        [DataMember(Name = "extra", EmitDefaultValue = true)]
        public Dictionary<string, string> Extra { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorParameters {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  EmptySpoolWeight: ").Append(EmptySpoolWeight).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1024.", new [] { "Comment" });
            }

            // EmptySpoolWeight (decimal?) minimum
            if (this.EmptySpoolWeight < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for EmptySpoolWeight, must be a value greater than or equal to 0.", new [] { "EmptySpoolWeight" });
            }

            // ExternalId (string) maxLength
            if (this.ExternalId != null && this.ExternalId.Length > 256)
            {
                yield return new ValidationResult("Invalid value for ExternalId, length must be less than 256.", new [] { "ExternalId" });
            }

            yield break;
        }
    }

}
