/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// Event.
    /// </summary>
    [DataContract(Name = "VendorEvent")]
    public partial class VendorEvent : IValidatableObject
    {

        /// <summary>
        /// Event type.
        /// </summary>
        /// <value>Event type.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public EventType Type { get; set; }
        /// <summary>
        /// Resource type.
        /// </summary>
        /// <value>Resource type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceEnum
        {
            /// <summary>
            /// Enum Vendor for value: vendor
            /// </summary>
            [EnumMember(Value = "vendor")]
            Vendor = 1
        }


        /// <summary>
        /// Resource type.
        /// </summary>
        /// <value>Resource type.</value>
        [DataMember(Name = "resource", IsRequired = true, EmitDefaultValue = true)]
        public ResourceEnum Resource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorEvent" /> class.
        /// </summary>
        /// <param name="type">Event type. (required).</param>
        /// <param name="resource">Resource type. (required).</param>
        /// <param name="date">When the event occured. UTC Timezone. (required).</param>
        /// <param name="payload">Updated vendor. (required).</param>
        public VendorEvent(EventType type = default(EventType), ResourceEnum resource = default(ResourceEnum), string date = default(string), Vendor payload = default(Vendor))
        {
            this.Type = type;
            this.Resource = resource;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for VendorEvent and cannot be null");
            }
            this.Date = date;
            // to ensure "payload" is required (not null)
            if (payload == null)
            {
                throw new ArgumentNullException("payload is a required property for VendorEvent and cannot be null");
            }
            this.Payload = payload;
        }

        /// <summary>
        /// When the event occured. UTC Timezone.
        /// </summary>
        /// <value>When the event occured. UTC Timezone.</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public string Date { get; set; }

        /// <summary>
        /// Updated vendor.
        /// </summary>
        /// <value>Updated vendor.</value>
        [DataMember(Name = "payload", IsRequired = true, EmitDefaultValue = true)]
        public Vendor Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorEvent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
