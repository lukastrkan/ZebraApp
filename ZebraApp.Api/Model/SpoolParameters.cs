/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ZebraApp.Api.Client.OpenAPIDateConverter;

namespace ZebraApp.Api.Model
{
    /// <summary>
    /// SpoolParameters
    /// </summary>
    [DataContract(Name = "SpoolParameters")]
    public partial class SpoolParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpoolParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolParameters" /> class.
        /// </summary>
        /// <param name="firstUsed">firstUsed.</param>
        /// <param name="lastUsed">lastUsed.</param>
        /// <param name="filamentId">The ID of the filament type of this spool. (required).</param>
        /// <param name="price">price.</param>
        /// <param name="initialWeight">initialWeight.</param>
        /// <param name="spoolWeight">spoolWeight.</param>
        /// <param name="remainingWeight">remainingWeight.</param>
        /// <param name="usedWeight">usedWeight.</param>
        /// <param name="location">location.</param>
        /// <param name="lotNr">lotNr.</param>
        /// <param name="comment">comment.</param>
        /// <param name="archived">Whether this spool is archived and should not be used anymore. (default to false).</param>
        /// <param name="extra">extra.</param>
        public SpoolParameters(DateTime? firstUsed = default(DateTime?), DateTime? lastUsed = default(DateTime?), int filamentId = default(int), decimal? price = default(decimal?), decimal? initialWeight = default(decimal?), decimal? spoolWeight = default(decimal?), decimal? remainingWeight = default(decimal?), decimal? usedWeight = default(decimal?), string location = default(string), string lotNr = default(string), string comment = default(string), bool archived = false, Dictionary<string, string> extra = default(Dictionary<string, string>))
        {
            this.FilamentId = filamentId;
            this.FirstUsed = firstUsed;
            this.LastUsed = lastUsed;
            this.Price = price;
            this.InitialWeight = initialWeight;
            this.SpoolWeight = spoolWeight;
            this.RemainingWeight = remainingWeight;
            this.UsedWeight = usedWeight;
            this.Location = location;
            this.LotNr = lotNr;
            this.Comment = comment;
            this.Archived = archived;
            this.Extra = extra;
        }

        /// <summary>
        /// Gets or Sets FirstUsed
        /// </summary>
        [DataMember(Name = "first_used", EmitDefaultValue = true)]
        public DateTime? FirstUsed { get; set; }

        /// <summary>
        /// Gets or Sets LastUsed
        /// </summary>
        [DataMember(Name = "last_used", EmitDefaultValue = true)]
        public DateTime? LastUsed { get; set; }

        /// <summary>
        /// The ID of the filament type of this spool.
        /// </summary>
        /// <value>The ID of the filament type of this spool.</value>
        [DataMember(Name = "filament_id", IsRequired = true, EmitDefaultValue = true)]
        public int FilamentId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public decimal? Price { get; set; }

        /// <summary>
        /// Gets or Sets InitialWeight
        /// </summary>
        [DataMember(Name = "initial_weight", EmitDefaultValue = true)]
        public decimal? InitialWeight { get; set; }

        /// <summary>
        /// Gets or Sets SpoolWeight
        /// </summary>
        [DataMember(Name = "spool_weight", EmitDefaultValue = true)]
        public decimal? SpoolWeight { get; set; }

        /// <summary>
        /// Gets or Sets RemainingWeight
        /// </summary>
        [DataMember(Name = "remaining_weight", EmitDefaultValue = true)]
        public decimal? RemainingWeight { get; set; }

        /// <summary>
        /// Gets or Sets UsedWeight
        /// </summary>
        [DataMember(Name = "used_weight", EmitDefaultValue = true)]
        public decimal? UsedWeight { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets LotNr
        /// </summary>
        [DataMember(Name = "lot_nr", EmitDefaultValue = true)]
        public string LotNr { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = true)]
        public string Comment { get; set; }

        /// <summary>
        /// Whether this spool is archived and should not be used anymore.
        /// </summary>
        /// <value>Whether this spool is archived and should not be used anymore.</value>
        [DataMember(Name = "archived", EmitDefaultValue = true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets Extra
        /// </summary>
        [DataMember(Name = "extra", EmitDefaultValue = true)]
        public Dictionary<string, string> Extra { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpoolParameters {\n");
            sb.Append("  FirstUsed: ").Append(FirstUsed).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("  FilamentId: ").Append(FilamentId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  InitialWeight: ").Append(InitialWeight).Append("\n");
            sb.Append("  SpoolWeight: ").Append(SpoolWeight).Append("\n");
            sb.Append("  RemainingWeight: ").Append(RemainingWeight).Append("\n");
            sb.Append("  UsedWeight: ").Append(UsedWeight).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LotNr: ").Append(LotNr).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Price (decimal?) minimum
            if (this.Price < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for Price, must be a value greater than or equal to 0.", new [] { "Price" });
            }

            // InitialWeight (decimal?) minimum
            if (this.InitialWeight < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for InitialWeight, must be a value greater than or equal to 0.", new [] { "InitialWeight" });
            }

            // SpoolWeight (decimal?) minimum
            if (this.SpoolWeight < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for SpoolWeight, must be a value greater than or equal to 0.", new [] { "SpoolWeight" });
            }

            // RemainingWeight (decimal?) minimum
            if (this.RemainingWeight < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for RemainingWeight, must be a value greater than or equal to 0.", new [] { "RemainingWeight" });
            }

            // UsedWeight (decimal?) minimum
            if (this.UsedWeight < (decimal?)0)
            {
                yield return new ValidationResult("Invalid value for UsedWeight, must be a value greater than or equal to 0.", new [] { "UsedWeight" });
            }

            // Location (string) maxLength
            if (this.Location != null && this.Location.Length > 64)
            {
                yield return new ValidationResult("Invalid value for Location, length must be less than 64.", new [] { "Location" });
            }

            // LotNr (string) maxLength
            if (this.LotNr != null && this.LotNr.Length > 64)
            {
                yield return new ValidationResult("Invalid value for LotNr, length must be less than 64.", new [] { "LotNr" });
            }

            // Comment (string) maxLength
            if (this.Comment != null && this.Comment.Length > 1024)
            {
                yield return new ValidationResult("Invalid value for Comment, length must be less than 1024.", new [] { "Comment" });
            }

            yield break;
        }
    }

}
