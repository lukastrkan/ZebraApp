/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ZebraApp.Api.Client;
using ZebraApp.Api.Model;

namespace ZebraApp.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpoolApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Spool
        /// </summary>
        /// <remarks>
        /// Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        Spool AddSpoolSpoolPost(SpoolParameters spoolParameters, int operationIndex = 0);

        /// <summary>
        /// Add Spool
        /// </summary>
        /// <remarks>
        /// Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        ApiResponse<Spool> AddSpoolSpoolPostWithHttpInfo(SpoolParameters spoolParameters, int operationIndex = 0);
        /// <summary>
        /// Delete Spool
        /// </summary>
        /// <remarks>
        /// Delete a spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message DeleteSpoolSpoolSpoolIdDelete(int spoolId, int operationIndex = 0);

        /// <summary>
        /// Delete Spool
        /// </summary>
        /// <remarks>
        /// Delete a spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> DeleteSpoolSpoolSpoolIdDeleteWithHttpInfo(int spoolId, int operationIndex = 0);
        /// <summary>
        /// Find Spool
        /// </summary>
        /// <remarks>
        /// Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Spool&gt;</returns>
        List<Spool> FindSpoolSpoolGet(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Find Spool
        /// </summary>
        /// <remarks>
        /// Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Spool&gt;</returns>
        ApiResponse<List<Spool>> FindSpoolSpoolGetWithHttpInfo(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Spool
        /// </summary>
        /// <remarks>
        /// Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        Spool GetSpoolSpoolSpoolIdGet(int spoolId, int operationIndex = 0);

        /// <summary>
        /// Get Spool
        /// </summary>
        /// <remarks>
        /// Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        ApiResponse<Spool> GetSpoolSpoolSpoolIdGetWithHttpInfo(int spoolId, int operationIndex = 0);
        /// <summary>
        /// Update Spool
        /// </summary>
        /// <remarks>
        /// Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        Spool UpdateSpoolSpoolSpoolIdPatch(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0);

        /// <summary>
        /// Update Spool
        /// </summary>
        /// <remarks>
        /// Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        ApiResponse<Spool> UpdateSpoolSpoolSpoolIdPatchWithHttpInfo(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0);
        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement
        /// </summary>
        /// <remarks>
        /// Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        Spool UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0);

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement
        /// </summary>
        /// <remarks>
        /// Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        ApiResponse<Spool> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutWithHttpInfo(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0);
        /// <summary>
        /// Use Spool Filament
        /// </summary>
        /// <remarks>
        /// Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        Spool UseSpoolFilamentSpoolSpoolIdUsePut(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0);

        /// <summary>
        /// Use Spool Filament
        /// </summary>
        /// <remarks>
        /// Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        ApiResponse<Spool> UseSpoolFilamentSpoolSpoolIdUsePutWithHttpInfo(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpoolApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Spool
        /// </summary>
        /// <remarks>
        /// Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        System.Threading.Tasks.Task<Spool> AddSpoolSpoolPostAsync(SpoolParameters spoolParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Spool
        /// </summary>
        /// <remarks>
        /// Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Spool>> AddSpoolSpoolPostWithHttpInfoAsync(SpoolParameters spoolParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Spool
        /// </summary>
        /// <remarks>
        /// Delete a spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> DeleteSpoolSpoolSpoolIdDeleteAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Spool
        /// </summary>
        /// <remarks>
        /// Delete a spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> DeleteSpoolSpoolSpoolIdDeleteWithHttpInfoAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Find Spool
        /// </summary>
        /// <remarks>
        /// Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Spool&gt;</returns>
        System.Threading.Tasks.Task<List<Spool>> FindSpoolSpoolGetAsync(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Find Spool
        /// </summary>
        /// <remarks>
        /// Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Spool&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Spool>>> FindSpoolSpoolGetWithHttpInfoAsync(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Spool
        /// </summary>
        /// <remarks>
        /// Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        System.Threading.Tasks.Task<Spool> GetSpoolSpoolSpoolIdGetAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Spool
        /// </summary>
        /// <remarks>
        /// Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Spool>> GetSpoolSpoolSpoolIdGetWithHttpInfoAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Spool
        /// </summary>
        /// <remarks>
        /// Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        System.Threading.Tasks.Task<Spool> UpdateSpoolSpoolSpoolIdPatchAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Spool
        /// </summary>
        /// <remarks>
        /// Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Spool>> UpdateSpoolSpoolSpoolIdPatchWithHttpInfoAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement
        /// </summary>
        /// <remarks>
        /// Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        System.Threading.Tasks.Task<Spool> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement
        /// </summary>
        /// <remarks>
        /// Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Spool>> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutWithHttpInfoAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Use Spool Filament
        /// </summary>
        /// <remarks>
        /// Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        System.Threading.Tasks.Task<Spool> UseSpoolFilamentSpoolSpoolIdUsePutAsync(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Use Spool Filament
        /// </summary>
        /// <remarks>
        /// Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Spool>> UseSpoolFilamentSpoolSpoolIdUsePutWithHttpInfoAsync(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpoolApi : ISpoolApiSync, ISpoolApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpoolApi : ISpoolApi
    {
        private ZebraApp.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpoolApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpoolApi(string basePath)
        {
            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                new ZebraApp.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpoolApi(ZebraApp.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpoolApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpoolApi(ZebraApp.Api.Client.ISynchronousClient client, ZebraApp.Api.Client.IAsynchronousClient asyncClient, ZebraApp.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ZebraApp.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ZebraApp.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ZebraApp.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZebraApp.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Spool Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        public Spool AddSpoolSpoolPost(SpoolParameters spoolParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = AddSpoolSpoolPostWithHttpInfo(spoolParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Spool Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        public ZebraApp.Api.Client.ApiResponse<Spool> AddSpoolSpoolPostWithHttpInfo(SpoolParameters spoolParameters, int operationIndex = 0)
        {
            // verify the required parameter 'spoolParameters' is set
            if (spoolParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolParameters' when calling SpoolApi->AddSpoolSpoolPost");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = spoolParameters;

            localVarRequestOptions.Operation = "SpoolApi.AddSpoolSpoolPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Spool>("/spool", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSpoolSpoolPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Spool Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        public async System.Threading.Tasks.Task<Spool> AddSpoolSpoolPostAsync(SpoolParameters spoolParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = await AddSpoolSpoolPostWithHttpInfoAsync(spoolParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Spool Add a new spool to the database. Only specify either remaining_weight or used_weight. If no weight is set, the spool will be assumed to be full.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Spool>> AddSpoolSpoolPostWithHttpInfoAsync(SpoolParameters spoolParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'spoolParameters' is set
            if (spoolParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolParameters' when calling SpoolApi->AddSpoolSpoolPost");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = spoolParameters;

            localVarRequestOptions.Operation = "SpoolApi.AddSpoolSpoolPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Spool>("/spool", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSpoolSpoolPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Spool Delete a spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message DeleteSpoolSpoolSpoolIdDelete(int spoolId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Message> localVarResponse = DeleteSpoolSpoolSpoolIdDeleteWithHttpInfo(spoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Spool Delete a spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public ZebraApp.Api.Client.ApiResponse<Message> DeleteSpoolSpoolSpoolIdDeleteWithHttpInfo(int spoolId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter

            localVarRequestOptions.Operation = "SpoolApi.DeleteSpoolSpoolSpoolIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Message>("/spool/{spool_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpoolSpoolSpoolIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Spool Delete a spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> DeleteSpoolSpoolSpoolIdDeleteAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Message> localVarResponse = await DeleteSpoolSpoolSpoolIdDeleteWithHttpInfoAsync(spoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Spool Delete a spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Message>> DeleteSpoolSpoolSpoolIdDeleteWithHttpInfoAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter

            localVarRequestOptions.Operation = "SpoolApi.DeleteSpoolSpoolSpoolIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Message>("/spool/{spool_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpoolSpoolSpoolIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Spool Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Spool&gt;</returns>
        public List<Spool> FindSpoolSpoolGet(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<List<Spool>> localVarResponse = FindSpoolSpoolGetWithHttpInfo(filamentName, filamentId, filamentMaterial, vendorName, vendorId, filamentName2, filamentId2, filamentMaterial2, filamentVendorName, filamentVendorId, location, lotNr, allowArchived, sort, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Spool Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Spool&gt;</returns>
        public ZebraApp.Api.Client.ApiResponse<List<Spool>> FindSpoolSpoolGetWithHttpInfo(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filamentName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament_name", filamentName));
            }
            if (filamentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament_id", filamentId));
            }
            if (filamentMaterial != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament_material", filamentMaterial));
            }
            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_name", vendorName));
            }
            if (vendorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_id", vendorId));
            }
            if (filamentName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.name", filamentName2));
            }
            if (filamentId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.id", filamentId2));
            }
            if (filamentMaterial2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.material", filamentMaterial2));
            }
            if (filamentVendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.vendor.name", filamentVendorName));
            }
            if (filamentVendorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.vendor.id", filamentVendorId));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (lotNr != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "lot_nr", lotNr));
            }
            if (allowArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "allow_archived", allowArchived));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "SpoolApi.FindSpoolSpoolGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Spool>>("/spool", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSpoolSpoolGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Spool Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Spool&gt;</returns>
        public async System.Threading.Tasks.Task<List<Spool>> FindSpoolSpoolGetAsync(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<List<Spool>> localVarResponse = await FindSpoolSpoolGetWithHttpInfoAsync(filamentName, filamentId, filamentMaterial, vendorName, vendorId, filamentName2, filamentId2, filamentMaterial2, filamentVendorName, filamentVendorId, location, lotNr, allowArchived, sort, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Spool Get a list of spools that matches the search query. A websocket is served on the same path to listen for updates to any spool, or added or deleted spools. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentName">See filament.name. (optional) (deprecated)</param>
        /// <param name="filamentId">See filament.id. (optional) (deprecated)</param>
        /// <param name="filamentMaterial">See filament.material. (optional) (deprecated)</param>
        /// <param name="vendorName">See filament.vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See filament.vendor.id. (optional) (deprecated)</param>
        /// <param name="filamentName2">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match spools with no filament name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentId2">Match an exact filament ID. Separate multiple IDs with a comma. (optional)</param>
        /// <param name="filamentMaterial2">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match spools with no filament material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorName">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match spools with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="filamentVendorId">Match an exact vendor ID. Separate multiple IDs with a comma. Set it to -1 to match spools with filaments with no vendor. (optional)</param>
        /// <param name="location">Partial case-insensitive search term for the spool location. Separate multiple terms with a comma. Specify an empty string to match spools with no location. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="lotNr">Partial case-insensitive search term for the spool lot number. Separate multiple terms with a comma. Specify an empty string to match spools with no lot nr. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="allowArchived">Whether to include archived spools in the search results. (optional, default to false)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Spool&gt;)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<List<Spool>>> FindSpoolSpoolGetWithHttpInfoAsync(string? filamentName = default(string?), string? filamentId = default(string?), string? filamentMaterial = default(string?), string? vendorName = default(string?), string? vendorId = default(string?), string? filamentName2 = default(string?), string? filamentId2 = default(string?), string? filamentMaterial2 = default(string?), string? filamentVendorName = default(string?), string? filamentVendorId = default(string?), string? location = default(string?), string? lotNr = default(string?), bool? allowArchived = default(bool?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filamentName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament_name", filamentName));
            }
            if (filamentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament_id", filamentId));
            }
            if (filamentMaterial != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament_material", filamentMaterial));
            }
            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_name", vendorName));
            }
            if (vendorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_id", vendorId));
            }
            if (filamentName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.name", filamentName2));
            }
            if (filamentId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.id", filamentId2));
            }
            if (filamentMaterial2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.material", filamentMaterial2));
            }
            if (filamentVendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.vendor.name", filamentVendorName));
            }
            if (filamentVendorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "filament.vendor.id", filamentVendorId));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (lotNr != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "lot_nr", lotNr));
            }
            if (allowArchived != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "allow_archived", allowArchived));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "SpoolApi.FindSpoolSpoolGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Spool>>("/spool", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindSpoolSpoolGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Spool Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        public Spool GetSpoolSpoolSpoolIdGet(int spoolId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = GetSpoolSpoolSpoolIdGetWithHttpInfo(spoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Spool Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        public ZebraApp.Api.Client.ApiResponse<Spool> GetSpoolSpoolSpoolIdGetWithHttpInfo(int spoolId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter

            localVarRequestOptions.Operation = "SpoolApi.GetSpoolSpoolSpoolIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Spool>("/spool/{spool_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpoolSpoolSpoolIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Spool Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        public async System.Threading.Tasks.Task<Spool> GetSpoolSpoolSpoolIdGetAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = await GetSpoolSpoolSpoolIdGetWithHttpInfoAsync(spoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Spool Get a specific spool. A websocket is served on the same path to listen for changes to the spool. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Spool>> GetSpoolSpoolSpoolIdGetWithHttpInfoAsync(int spoolId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter

            localVarRequestOptions.Operation = "SpoolApi.GetSpoolSpoolSpoolIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Spool>("/spool/{spool_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpoolSpoolSpoolIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Spool Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        public Spool UpdateSpoolSpoolSpoolIdPatch(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = UpdateSpoolSpoolSpoolIdPatchWithHttpInfo(spoolId, spoolUpdateParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Spool Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        public ZebraApp.Api.Client.ApiResponse<Spool> UpdateSpoolSpoolSpoolIdPatchWithHttpInfo(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0)
        {
            // verify the required parameter 'spoolUpdateParameters' is set
            if (spoolUpdateParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolUpdateParameters' when calling SpoolApi->UpdateSpoolSpoolSpoolIdPatch");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter
            localVarRequestOptions.Data = spoolUpdateParameters;

            localVarRequestOptions.Operation = "SpoolApi.UpdateSpoolSpoolSpoolIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Spool>("/spool/{spool_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSpoolSpoolSpoolIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Spool Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        public async System.Threading.Tasks.Task<Spool> UpdateSpoolSpoolSpoolIdPatchAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = await UpdateSpoolSpoolSpoolIdPatchWithHttpInfoAsync(spoolId, spoolUpdateParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Spool Update any attribute of a spool. Only fields specified in the request will be affected. remaining_weight and used_weight can&#39;t be set at the same time. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Spool>> UpdateSpoolSpoolSpoolIdPatchWithHttpInfoAsync(int spoolId, SpoolUpdateParameters spoolUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'spoolUpdateParameters' is set
            if (spoolUpdateParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolUpdateParameters' when calling SpoolApi->UpdateSpoolSpoolSpoolIdPatch");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter
            localVarRequestOptions.Data = spoolUpdateParameters;

            localVarRequestOptions.Operation = "SpoolApi.UpdateSpoolSpoolSpoolIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Spool>("/spool/{spool_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSpoolSpoolSpoolIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        public Spool UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutWithHttpInfo(spoolId, spoolMeasureParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        public ZebraApp.Api.Client.ApiResponse<Spool> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutWithHttpInfo(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0)
        {
            // verify the required parameter 'spoolMeasureParameters' is set
            if (spoolMeasureParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolMeasureParameters' when calling SpoolApi->UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter
            localVarRequestOptions.Data = spoolMeasureParameters;

            localVarRequestOptions.Operation = "SpoolApi.UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Spool>("/spool/{spool_id}/measure", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        public async System.Threading.Tasks.Task<Spool> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = await UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutWithHttpInfoAsync(spoolId, spoolMeasureParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Use Spool Filament Based On The Current Weight Measurement Use some weight of filament from the spool. Specify the current gross weight of the spool.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolMeasureParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Spool>> UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePutWithHttpInfoAsync(int spoolId, SpoolMeasureParameters spoolMeasureParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'spoolMeasureParameters' is set
            if (spoolMeasureParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolMeasureParameters' when calling SpoolApi->UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter
            localVarRequestOptions.Data = spoolMeasureParameters;

            localVarRequestOptions.Operation = "SpoolApi.UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Spool>("/spool/{spool_id}/measure", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UseSpoolFilamentBasedOnTheCurrentWeightMeasurementSpoolSpoolIdMeasurePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use Spool Filament Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Spool</returns>
        public Spool UseSpoolFilamentSpoolSpoolIdUsePut(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = UseSpoolFilamentSpoolSpoolIdUsePutWithHttpInfo(spoolId, spoolUseParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Use Spool Filament Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Spool</returns>
        public ZebraApp.Api.Client.ApiResponse<Spool> UseSpoolFilamentSpoolSpoolIdUsePutWithHttpInfo(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0)
        {
            // verify the required parameter 'spoolUseParameters' is set
            if (spoolUseParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolUseParameters' when calling SpoolApi->UseSpoolFilamentSpoolSpoolIdUsePut");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter
            localVarRequestOptions.Data = spoolUseParameters;

            localVarRequestOptions.Operation = "SpoolApi.UseSpoolFilamentSpoolSpoolIdUsePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Spool>("/spool/{spool_id}/use", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UseSpoolFilamentSpoolSpoolIdUsePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Use Spool Filament Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Spool</returns>
        public async System.Threading.Tasks.Task<Spool> UseSpoolFilamentSpoolSpoolIdUsePutAsync(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Spool> localVarResponse = await UseSpoolFilamentSpoolSpoolIdUsePutWithHttpInfoAsync(spoolId, spoolUseParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Use Spool Filament Use some length or weight of filament from the spool. Specify either a length or a weight, not both.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spoolId"></param>
        /// <param name="spoolUseParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Spool)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Spool>> UseSpoolFilamentSpoolSpoolIdUsePutWithHttpInfoAsync(int spoolId, SpoolUseParameters spoolUseParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'spoolUseParameters' is set
            if (spoolUseParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'spoolUseParameters' when calling SpoolApi->UseSpoolFilamentSpoolSpoolIdUsePut");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spool_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(spoolId)); // path parameter
            localVarRequestOptions.Data = spoolUseParameters;

            localVarRequestOptions.Operation = "SpoolApi.UseSpoolFilamentSpoolSpoolIdUsePut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Spool>("/spool/{spool_id}/use", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UseSpoolFilamentSpoolSpoolIdUsePut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
