/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ZebraApp.Api.Client;
using ZebraApp.Api.Model;

namespace ZebraApp.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilamentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Filament
        /// </summary>
        /// <remarks>
        /// Add a new filament to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Filament</returns>
        Filament AddFilamentFilamentPost(FilamentParameters filamentParameters, int operationIndex = 0);

        /// <summary>
        /// Add Filament
        /// </summary>
        /// <remarks>
        /// Add a new filament to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Filament</returns>
        ApiResponse<Filament> AddFilamentFilamentPostWithHttpInfo(FilamentParameters filamentParameters, int operationIndex = 0);
        /// <summary>
        /// Delete Filament
        /// </summary>
        /// <remarks>
        /// Delete a filament.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message DeleteFilamentFilamentFilamentIdDelete(int filamentId, int operationIndex = 0);

        /// <summary>
        /// Delete Filament
        /// </summary>
        /// <remarks>
        /// Delete a filament.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> DeleteFilamentFilamentFilamentIdDeleteWithHttpInfo(int filamentId, int operationIndex = 0);
        /// <summary>
        /// Find Filaments
        /// </summary>
        /// <remarks>
        /// Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Filament&gt;</returns>
        List<Filament> FindFilamentsFilamentGet(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Find Filaments
        /// </summary>
        /// <remarks>
        /// Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Filament&gt;</returns>
        ApiResponse<List<Filament>> FindFilamentsFilamentGetWithHttpInfo(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Filament
        /// </summary>
        /// <remarks>
        /// Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Filament</returns>
        Filament GetFilamentFilamentFilamentIdGet(int filamentId, int operationIndex = 0);

        /// <summary>
        /// Get Filament
        /// </summary>
        /// <remarks>
        /// Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Filament</returns>
        ApiResponse<Filament> GetFilamentFilamentFilamentIdGetWithHttpInfo(int filamentId, int operationIndex = 0);
        /// <summary>
        /// Update Filament
        /// </summary>
        /// <remarks>
        /// Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Filament</returns>
        Filament UpdateFilamentFilamentFilamentIdPatch(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0);

        /// <summary>
        /// Update Filament
        /// </summary>
        /// <remarks>
        /// Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Filament</returns>
        ApiResponse<Filament> UpdateFilamentFilamentFilamentIdPatchWithHttpInfo(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilamentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Filament
        /// </summary>
        /// <remarks>
        /// Add a new filament to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Filament</returns>
        System.Threading.Tasks.Task<Filament> AddFilamentFilamentPostAsync(FilamentParameters filamentParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Filament
        /// </summary>
        /// <remarks>
        /// Add a new filament to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Filament)</returns>
        System.Threading.Tasks.Task<ApiResponse<Filament>> AddFilamentFilamentPostWithHttpInfoAsync(FilamentParameters filamentParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Filament
        /// </summary>
        /// <remarks>
        /// Delete a filament.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> DeleteFilamentFilamentFilamentIdDeleteAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Filament
        /// </summary>
        /// <remarks>
        /// Delete a filament.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> DeleteFilamentFilamentFilamentIdDeleteWithHttpInfoAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Find Filaments
        /// </summary>
        /// <remarks>
        /// Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Filament&gt;</returns>
        System.Threading.Tasks.Task<List<Filament>> FindFilamentsFilamentGetAsync(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Find Filaments
        /// </summary>
        /// <remarks>
        /// Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Filament&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Filament>>> FindFilamentsFilamentGetWithHttpInfoAsync(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Filament
        /// </summary>
        /// <remarks>
        /// Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Filament</returns>
        System.Threading.Tasks.Task<Filament> GetFilamentFilamentFilamentIdGetAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Filament
        /// </summary>
        /// <remarks>
        /// Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Filament)</returns>
        System.Threading.Tasks.Task<ApiResponse<Filament>> GetFilamentFilamentFilamentIdGetWithHttpInfoAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Filament
        /// </summary>
        /// <remarks>
        /// Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Filament</returns>
        System.Threading.Tasks.Task<Filament> UpdateFilamentFilamentFilamentIdPatchAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Filament
        /// </summary>
        /// <remarks>
        /// Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Filament)</returns>
        System.Threading.Tasks.Task<ApiResponse<Filament>> UpdateFilamentFilamentFilamentIdPatchWithHttpInfoAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilamentApi : IFilamentApiSync, IFilamentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilamentApi : IFilamentApi
    {
        private ZebraApp.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilamentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilamentApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilamentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilamentApi(string basePath)
        {
            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                new ZebraApp.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilamentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilamentApi(ZebraApp.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilamentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilamentApi(ZebraApp.Api.Client.ISynchronousClient client, ZebraApp.Api.Client.IAsynchronousClient asyncClient, ZebraApp.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ZebraApp.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ZebraApp.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ZebraApp.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZebraApp.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Filament Add a new filament to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Filament</returns>
        public Filament AddFilamentFilamentPost(FilamentParameters filamentParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Filament> localVarResponse = AddFilamentFilamentPostWithHttpInfo(filamentParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Filament Add a new filament to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Filament</returns>
        public ZebraApp.Api.Client.ApiResponse<Filament> AddFilamentFilamentPostWithHttpInfo(FilamentParameters filamentParameters, int operationIndex = 0)
        {
            // verify the required parameter 'filamentParameters' is set
            if (filamentParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'filamentParameters' when calling FilamentApi->AddFilamentFilamentPost");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = filamentParameters;

            localVarRequestOptions.Operation = "FilamentApi.AddFilamentFilamentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Filament>("/filament", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFilamentFilamentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Filament Add a new filament to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Filament</returns>
        public async System.Threading.Tasks.Task<Filament> AddFilamentFilamentPostAsync(FilamentParameters filamentParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Filament> localVarResponse = await AddFilamentFilamentPostWithHttpInfoAsync(filamentParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Filament Add a new filament to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Filament)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Filament>> AddFilamentFilamentPostWithHttpInfoAsync(FilamentParameters filamentParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'filamentParameters' is set
            if (filamentParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'filamentParameters' when calling FilamentApi->AddFilamentFilamentPost");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = filamentParameters;

            localVarRequestOptions.Operation = "FilamentApi.AddFilamentFilamentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Filament>("/filament", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddFilamentFilamentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Filament Delete a filament.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message DeleteFilamentFilamentFilamentIdDelete(int filamentId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Message> localVarResponse = DeleteFilamentFilamentFilamentIdDeleteWithHttpInfo(filamentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Filament Delete a filament.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public ZebraApp.Api.Client.ApiResponse<Message> DeleteFilamentFilamentFilamentIdDeleteWithHttpInfo(int filamentId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filament_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(filamentId)); // path parameter

            localVarRequestOptions.Operation = "FilamentApi.DeleteFilamentFilamentFilamentIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Message>("/filament/{filament_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFilamentFilamentFilamentIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Filament Delete a filament.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> DeleteFilamentFilamentFilamentIdDeleteAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Message> localVarResponse = await DeleteFilamentFilamentFilamentIdDeleteWithHttpInfoAsync(filamentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Filament Delete a filament.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Message>> DeleteFilamentFilamentFilamentIdDeleteWithHttpInfoAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filament_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(filamentId)); // path parameter

            localVarRequestOptions.Operation = "FilamentApi.DeleteFilamentFilamentFilamentIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Message>("/filament/{filament_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFilamentFilamentFilamentIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Filaments Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Filament&gt;</returns>
        public List<Filament> FindFilamentsFilamentGet(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<List<Filament>> localVarResponse = FindFilamentsFilamentGetWithHttpInfo(vendorName, vendorId, vendorName2, vendorId2, name, material, articleNumber, colorHex, colorSimilarityThreshold, externalId, sort, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Filaments Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Filament&gt;</returns>
        public ZebraApp.Api.Client.ApiResponse<List<Filament>> FindFilamentsFilamentGetWithHttpInfo(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_name", vendorName));
            }
            if (vendorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_id", vendorId));
            }
            if (vendorName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor.name", vendorName2));
            }
            if (vendorId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor.id", vendorId2));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (material != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "material", material));
            }
            if (articleNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "article_number", articleNumber));
            }
            if (colorHex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "color_hex", colorHex));
            }
            if (colorSimilarityThreshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "color_similarity_threshold", colorSimilarityThreshold));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "FilamentApi.FindFilamentsFilamentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Filament>>("/filament", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFilamentsFilamentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Filaments Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Filament&gt;</returns>
        public async System.Threading.Tasks.Task<List<Filament>> FindFilamentsFilamentGetAsync(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<List<Filament>> localVarResponse = await FindFilamentsFilamentGetWithHttpInfoAsync(vendorName, vendorId, vendorName2, vendorId2, name, material, articleNumber, colorHex, colorSimilarityThreshold, externalId, sort, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Filaments Get a list of filaments that matches the search query. A websocket is served on the same path to listen for updates to any filament, or added or deleted filaments. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorName">See vendor.name. (optional) (deprecated)</param>
        /// <param name="vendorId">See vendor.id. (optional) (deprecated)</param>
        /// <param name="vendorName2">Partial case-insensitive search term for the filament vendor name. Separate multiple terms with a comma. Specify an empty string to match filaments with no vendor name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="vendorId2">Match an exact vendor ID. Separate multiple IDs with a comma. Specify -1 to match filaments with no vendor. (optional)</param>
        /// <param name="name">Partial case-insensitive search term for the filament name. Separate multiple terms with a comma. Specify an empty string to match filaments with no name. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="material">Partial case-insensitive search term for the filament material. Separate multiple terms with a comma. Specify an empty string to match filaments with no material. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="articleNumber">Partial case-insensitive search term for the filament article number. Separate multiple terms with a comma. Specify an empty string to match filaments with no article number. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="colorHex">Match filament by similar color. Slow operation! (optional)</param>
        /// <param name="colorSimilarityThreshold">The similarity threshold for color matching. A value between 0.0-100.0, where 0 means match only exactly the same color. (optional, default to 20M)</param>
        /// <param name="externalId">Find filaments imported by the given external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Filament&gt;)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<List<Filament>>> FindFilamentsFilamentGetWithHttpInfoAsync(string? vendorName = default(string?), string? vendorId = default(string?), string? vendorName2 = default(string?), string? vendorId2 = default(string?), string? name = default(string?), string? material = default(string?), string? articleNumber = default(string?), string? colorHex = default(string?), decimal? colorSimilarityThreshold = default(decimal?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (vendorName != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_name", vendorName));
            }
            if (vendorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor_id", vendorId));
            }
            if (vendorName2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor.name", vendorName2));
            }
            if (vendorId2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "vendor.id", vendorId2));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (material != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "material", material));
            }
            if (articleNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "article_number", articleNumber));
            }
            if (colorHex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "color_hex", colorHex));
            }
            if (colorSimilarityThreshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "color_similarity_threshold", colorSimilarityThreshold));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "FilamentApi.FindFilamentsFilamentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Filament>>("/filament", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindFilamentsFilamentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filament Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Filament</returns>
        public Filament GetFilamentFilamentFilamentIdGet(int filamentId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Filament> localVarResponse = GetFilamentFilamentFilamentIdGetWithHttpInfo(filamentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filament Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Filament</returns>
        public ZebraApp.Api.Client.ApiResponse<Filament> GetFilamentFilamentFilamentIdGetWithHttpInfo(int filamentId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filament_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(filamentId)); // path parameter

            localVarRequestOptions.Operation = "FilamentApi.GetFilamentFilamentFilamentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Filament>("/filament/{filament_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilamentFilamentFilamentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filament Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Filament</returns>
        public async System.Threading.Tasks.Task<Filament> GetFilamentFilamentFilamentIdGetAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Filament> localVarResponse = await GetFilamentFilamentFilamentIdGetWithHttpInfoAsync(filamentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filament Get a specific filament. A websocket is served on the same path to listen for changes to the filament. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Filament)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Filament>> GetFilamentFilamentFilamentIdGetWithHttpInfoAsync(int filamentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filament_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(filamentId)); // path parameter

            localVarRequestOptions.Operation = "FilamentApi.GetFilamentFilamentFilamentIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Filament>("/filament/{filament_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilamentFilamentFilamentIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Filament Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Filament</returns>
        public Filament UpdateFilamentFilamentFilamentIdPatch(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Filament> localVarResponse = UpdateFilamentFilamentFilamentIdPatchWithHttpInfo(filamentId, filamentUpdateParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Filament Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Filament</returns>
        public ZebraApp.Api.Client.ApiResponse<Filament> UpdateFilamentFilamentFilamentIdPatchWithHttpInfo(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0)
        {
            // verify the required parameter 'filamentUpdateParameters' is set
            if (filamentUpdateParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'filamentUpdateParameters' when calling FilamentApi->UpdateFilamentFilamentFilamentIdPatch");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filament_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(filamentId)); // path parameter
            localVarRequestOptions.Data = filamentUpdateParameters;

            localVarRequestOptions.Operation = "FilamentApi.UpdateFilamentFilamentFilamentIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Filament>("/filament/{filament_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFilamentFilamentFilamentIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Filament Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Filament</returns>
        public async System.Threading.Tasks.Task<Filament> UpdateFilamentFilamentFilamentIdPatchAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Filament> localVarResponse = await UpdateFilamentFilamentFilamentIdPatchWithHttpInfoAsync(filamentId, filamentUpdateParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Filament Update any attribute of a filament. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filamentId"></param>
        /// <param name="filamentUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Filament)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Filament>> UpdateFilamentFilamentFilamentIdPatchWithHttpInfoAsync(int filamentId, FilamentUpdateParameters filamentUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'filamentUpdateParameters' is set
            if (filamentUpdateParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'filamentUpdateParameters' when calling FilamentApi->UpdateFilamentFilamentFilamentIdPatch");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("filament_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(filamentId)); // path parameter
            localVarRequestOptions.Data = filamentUpdateParameters;

            localVarRequestOptions.Operation = "FilamentApi.UpdateFilamentFilamentFilamentIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Filament>("/filament/{filament_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFilamentFilamentFilamentIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
