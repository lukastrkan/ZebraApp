/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ZebraApp.Api.Client;
using ZebraApp.Api.Model;

namespace ZebraApp.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Vendor
        /// </summary>
        /// <remarks>
        /// Add a new vendor to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vendor</returns>
        Vendor AddVendorVendorPost(VendorParameters vendorParameters, int operationIndex = 0);

        /// <summary>
        /// Add Vendor
        /// </summary>
        /// <remarks>
        /// Add a new vendor to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vendor</returns>
        ApiResponse<Vendor> AddVendorVendorPostWithHttpInfo(VendorParameters vendorParameters, int operationIndex = 0);
        /// <summary>
        /// Delete Vendor
        /// </summary>
        /// <remarks>
        /// Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message DeleteVendorVendorVendorIdDelete(int vendorId, int operationIndex = 0);

        /// <summary>
        /// Delete Vendor
        /// </summary>
        /// <remarks>
        /// Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> DeleteVendorVendorVendorIdDeleteWithHttpInfo(int vendorId, int operationIndex = 0);
        /// <summary>
        /// Find Vendor
        /// </summary>
        /// <remarks>
        /// Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Vendor&gt;</returns>
        List<Vendor> FindVendorVendorGet(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// Find Vendor
        /// </summary>
        /// <remarks>
        /// Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Vendor&gt;</returns>
        ApiResponse<List<Vendor>> FindVendorVendorGetWithHttpInfo(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Vendor
        /// </summary>
        /// <remarks>
        /// Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vendor</returns>
        Vendor GetVendorVendorVendorIdGet(int vendorId, int operationIndex = 0);

        /// <summary>
        /// Get Vendor
        /// </summary>
        /// <remarks>
        /// Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vendor</returns>
        ApiResponse<Vendor> GetVendorVendorVendorIdGetWithHttpInfo(int vendorId, int operationIndex = 0);
        /// <summary>
        /// Update Vendor
        /// </summary>
        /// <remarks>
        /// Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vendor</returns>
        Vendor UpdateVendorVendorVendorIdPatch(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0);

        /// <summary>
        /// Update Vendor
        /// </summary>
        /// <remarks>
        /// Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vendor</returns>
        ApiResponse<Vendor> UpdateVendorVendorVendorIdPatchWithHttpInfo(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Vendor
        /// </summary>
        /// <remarks>
        /// Add a new vendor to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vendor</returns>
        System.Threading.Tasks.Task<Vendor> AddVendorVendorPostAsync(VendorParameters vendorParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Vendor
        /// </summary>
        /// <remarks>
        /// Add a new vendor to the database.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vendor)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vendor>> AddVendorVendorPostWithHttpInfoAsync(VendorParameters vendorParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Vendor
        /// </summary>
        /// <remarks>
        /// Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> DeleteVendorVendorVendorIdDeleteAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Vendor
        /// </summary>
        /// <remarks>
        /// Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> DeleteVendorVendorVendorIdDeleteWithHttpInfoAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Find Vendor
        /// </summary>
        /// <remarks>
        /// Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Vendor&gt;</returns>
        System.Threading.Tasks.Task<List<Vendor>> FindVendorVendorGetAsync(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Find Vendor
        /// </summary>
        /// <remarks>
        /// Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Vendor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vendor>>> FindVendorVendorGetWithHttpInfoAsync(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Vendor
        /// </summary>
        /// <remarks>
        /// Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vendor</returns>
        System.Threading.Tasks.Task<Vendor> GetVendorVendorVendorIdGetAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Vendor
        /// </summary>
        /// <remarks>
        /// Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vendor)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vendor>> GetVendorVendorVendorIdGetWithHttpInfoAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Vendor
        /// </summary>
        /// <remarks>
        /// Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vendor</returns>
        System.Threading.Tasks.Task<Vendor> UpdateVendorVendorVendorIdPatchAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Vendor
        /// </summary>
        /// <remarks>
        /// Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vendor)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vendor>> UpdateVendorVendorVendorIdPatchWithHttpInfoAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVendorApi : IVendorApiSync, IVendorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VendorApi : IVendorApi
    {
        private ZebraApp.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VendorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VendorApi(string basePath)
        {
            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                new ZebraApp.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VendorApi(ZebraApp.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VendorApi(ZebraApp.Api.Client.ISynchronousClient client, ZebraApp.Api.Client.IAsynchronousClient asyncClient, ZebraApp.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ZebraApp.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ZebraApp.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ZebraApp.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZebraApp.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Vendor Add a new vendor to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vendor</returns>
        public Vendor AddVendorVendorPost(VendorParameters vendorParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Vendor> localVarResponse = AddVendorVendorPostWithHttpInfo(vendorParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Vendor Add a new vendor to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vendor</returns>
        public ZebraApp.Api.Client.ApiResponse<Vendor> AddVendorVendorPostWithHttpInfo(VendorParameters vendorParameters, int operationIndex = 0)
        {
            // verify the required parameter 'vendorParameters' is set
            if (vendorParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'vendorParameters' when calling VendorApi->AddVendorVendorPost");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vendorParameters;

            localVarRequestOptions.Operation = "VendorApi.AddVendorVendorPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Vendor>("/vendor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVendorVendorPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Vendor Add a new vendor to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vendor</returns>
        public async System.Threading.Tasks.Task<Vendor> AddVendorVendorPostAsync(VendorParameters vendorParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Vendor> localVarResponse = await AddVendorVendorPostWithHttpInfoAsync(vendorParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Vendor Add a new vendor to the database.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vendor)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Vendor>> AddVendorVendorPostWithHttpInfoAsync(VendorParameters vendorParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'vendorParameters' is set
            if (vendorParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'vendorParameters' when calling VendorApi->AddVendorVendorPost");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = vendorParameters;

            localVarRequestOptions.Operation = "VendorApi.AddVendorVendorPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Vendor>("/vendor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVendorVendorPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Vendor Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message DeleteVendorVendorVendorIdDelete(int vendorId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Message> localVarResponse = DeleteVendorVendorVendorIdDeleteWithHttpInfo(vendorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Vendor Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public ZebraApp.Api.Client.ApiResponse<Message> DeleteVendorVendorVendorIdDeleteWithHttpInfo(int vendorId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(vendorId)); // path parameter

            localVarRequestOptions.Operation = "VendorApi.DeleteVendorVendorVendorIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Message>("/vendor/{vendor_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVendorVendorVendorIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Vendor Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> DeleteVendorVendorVendorIdDeleteAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Message> localVarResponse = await DeleteVendorVendorVendorIdDeleteWithHttpInfoAsync(vendorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Vendor Delete a vendor. The vendor attribute of any filaments who refer to the deleted vendor will be cleared.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Message>> DeleteVendorVendorVendorIdDeleteWithHttpInfoAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(vendorId)); // path parameter

            localVarRequestOptions.Operation = "VendorApi.DeleteVendorVendorVendorIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Message>("/vendor/{vendor_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVendorVendorVendorIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Vendor Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Vendor&gt;</returns>
        public List<Vendor> FindVendorVendorGet(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<List<Vendor>> localVarResponse = FindVendorVendorGetWithHttpInfo(name, externalId, sort, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Vendor Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Vendor&gt;</returns>
        public ZebraApp.Api.Client.ApiResponse<List<Vendor>> FindVendorVendorGetWithHttpInfo(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "VendorApi.FindVendorVendorGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Vendor>>("/vendor", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindVendorVendorGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Vendor Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Vendor&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vendor>> FindVendorVendorGetAsync(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<List<Vendor>> localVarResponse = await FindVendorVendorGetWithHttpInfoAsync(name, externalId, sort, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Vendor Get a list of vendors that matches the search query. A websocket is served on the same path to listen for updates to any vendor, or added or deleted vendors. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Partial case-insensitive search term for the vendor name. Separate multiple terms with a comma. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="externalId">Exact match for the vendor external ID. Separate multiple IDs with a comma. Specify empty string to match filaments with no external ID. Surround a term with quotes to search for the exact term. (optional)</param>
        /// <param name="sort">Sort the results by the given field. Should be a comma-separate string with \&quot;field:direction\&quot; items. (optional)</param>
        /// <param name="limit">Maximum number of items in the response. (optional)</param>
        /// <param name="offset">Offset in the full result set if a limit is set. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Vendor&gt;)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<List<Vendor>>> FindVendorVendorGetWithHttpInfoAsync(string? name = default(string?), string? externalId = default(string?), string? sort = default(string?), int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (externalId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "external_id", externalId));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "VendorApi.FindVendorVendorGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Vendor>>("/vendor", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindVendorVendorGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vendor Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vendor</returns>
        public Vendor GetVendorVendorVendorIdGet(int vendorId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Vendor> localVarResponse = GetVendorVendorVendorIdGetWithHttpInfo(vendorId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vendor Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vendor</returns>
        public ZebraApp.Api.Client.ApiResponse<Vendor> GetVendorVendorVendorIdGetWithHttpInfo(int vendorId, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(vendorId)); // path parameter

            localVarRequestOptions.Operation = "VendorApi.GetVendorVendorVendorIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Vendor>("/vendor/{vendor_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVendorVendorVendorIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vendor Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vendor</returns>
        public async System.Threading.Tasks.Task<Vendor> GetVendorVendorVendorIdGetAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Vendor> localVarResponse = await GetVendorVendorVendorIdGetWithHttpInfoAsync(vendorId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vendor Get a specific vendor. A websocket is served on the same path to listen for changes to the vendor. See the HTTP Response code 299 for the content of the websocket messages.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vendor)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Vendor>> GetVendorVendorVendorIdGetWithHttpInfoAsync(int vendorId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(vendorId)); // path parameter

            localVarRequestOptions.Operation = "VendorApi.GetVendorVendorVendorIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Vendor>("/vendor/{vendor_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVendorVendorVendorIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Vendor Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vendor</returns>
        public Vendor UpdateVendorVendorVendorIdPatch(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Vendor> localVarResponse = UpdateVendorVendorVendorIdPatchWithHttpInfo(vendorId, vendorUpdateParameters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Vendor Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vendor</returns>
        public ZebraApp.Api.Client.ApiResponse<Vendor> UpdateVendorVendorVendorIdPatchWithHttpInfo(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0)
        {
            // verify the required parameter 'vendorUpdateParameters' is set
            if (vendorUpdateParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'vendorUpdateParameters' when calling VendorApi->UpdateVendorVendorVendorIdPatch");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.Data = vendorUpdateParameters;

            localVarRequestOptions.Operation = "VendorApi.UpdateVendorVendorVendorIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Vendor>("/vendor/{vendor_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVendorVendorVendorIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Vendor Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vendor</returns>
        public async System.Threading.Tasks.Task<Vendor> UpdateVendorVendorVendorIdPatchAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Vendor> localVarResponse = await UpdateVendorVendorVendorIdPatchWithHttpInfoAsync(vendorId, vendorUpdateParameters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Vendor Update any attribute of a vendor. Only fields specified in the request will be affected. If extra is set, all existing extra fields will be removed and replaced with the new ones.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorId"></param>
        /// <param name="vendorUpdateParameters"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vendor)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Vendor>> UpdateVendorVendorVendorIdPatchWithHttpInfoAsync(int vendorId, VendorUpdateParameters vendorUpdateParameters, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'vendorUpdateParameters' is set
            if (vendorUpdateParameters == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'vendorUpdateParameters' when calling VendorApi->UpdateVendorVendorVendorIdPatch");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor_id", ZebraApp.Api.Client.ClientUtils.ParameterToString(vendorId)); // path parameter
            localVarRequestOptions.Data = vendorUpdateParameters;

            localVarRequestOptions.Operation = "VendorApi.UpdateVendorVendorVendorIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Vendor>("/vendor/{vendor_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVendorVendorVendorIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
