/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ZebraApp.Api.Client;
using ZebraApp.Api.Model;

namespace ZebraApp.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOtherApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find Article Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all article numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> FindArticleNumbersArticleNumberGet(int operationIndex = 0);

        /// <summary>
        /// Find Article Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all article numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> FindArticleNumbersArticleNumberGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Find Locations
        /// </summary>
        /// <remarks>
        /// Get a list of all spool locations.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> FindLocationsLocationGet(int operationIndex = 0);

        /// <summary>
        /// Find Locations
        /// </summary>
        /// <remarks>
        /// Get a list of all spool locations.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> FindLocationsLocationGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Find Lot Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all lot numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> FindLotNumbersLotNumberGet(int operationIndex = 0);

        /// <summary>
        /// Find Lot Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all lot numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> FindLotNumbersLotNumberGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Find Materials
        /// </summary>
        /// <remarks>
        /// Get a list of all filament materials.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> FindMaterialsMaterialGet(int operationIndex = 0);

        /// <summary>
        /// Find Materials
        /// </summary>
        /// <remarks>
        /// Get a list of all filament materials.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> FindMaterialsMaterialGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Rename Location
        /// </summary>
        /// <remarks>
        /// Rename a spool location. All spools in this location will be moved to the new location.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string RenameLocationLocationLocationPatch(string location, RenameLocationBody renameLocationBody, int operationIndex = 0);

        /// <summary>
        /// Rename Location
        /// </summary>
        /// <remarks>
        /// Rename a spool location. All spools in this location will be moved to the new location.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> RenameLocationLocationLocationPatchWithHttpInfo(string location, RenameLocationBody renameLocationBody, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOtherApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Find Article Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all article numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> FindArticleNumbersArticleNumberGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Find Article Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all article numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> FindArticleNumbersArticleNumberGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Find Locations
        /// </summary>
        /// <remarks>
        /// Get a list of all spool locations.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> FindLocationsLocationGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Find Locations
        /// </summary>
        /// <remarks>
        /// Get a list of all spool locations.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> FindLocationsLocationGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Find Lot Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all lot numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> FindLotNumbersLotNumberGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Find Lot Numbers
        /// </summary>
        /// <remarks>
        /// Get a list of all lot numbers.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> FindLotNumbersLotNumberGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Find Materials
        /// </summary>
        /// <remarks>
        /// Get a list of all filament materials.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> FindMaterialsMaterialGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Find Materials
        /// </summary>
        /// <remarks>
        /// Get a list of all filament materials.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> FindMaterialsMaterialGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Rename Location
        /// </summary>
        /// <remarks>
        /// Rename a spool location. All spools in this location will be moved to the new location.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> RenameLocationLocationLocationPatchAsync(string location, RenameLocationBody renameLocationBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Rename Location
        /// </summary>
        /// <remarks>
        /// Rename a spool location. All spools in this location will be moved to the new location.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> RenameLocationLocationLocationPatchWithHttpInfoAsync(string location, RenameLocationBody renameLocationBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOtherApi : IOtherApiSync, IOtherApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OtherApi : IOtherApi
    {
        private ZebraApp.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OtherApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OtherApi(string basePath)
        {
            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                new ZebraApp.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OtherApi(ZebraApp.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OtherApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OtherApi(ZebraApp.Api.Client.ISynchronousClient client, ZebraApp.Api.Client.IAsynchronousClient asyncClient, ZebraApp.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ZebraApp.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ZebraApp.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ZebraApp.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZebraApp.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Find Article Numbers Get a list of all article numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> FindArticleNumbersArticleNumberGet(int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = FindArticleNumbersArticleNumberGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Article Numbers Get a list of all article numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ZebraApp.Api.Client.ApiResponse<List<string>> FindArticleNumbersArticleNumberGetWithHttpInfo(int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindArticleNumbersArticleNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/article-number", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindArticleNumbersArticleNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Article Numbers Get a list of all article numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> FindArticleNumbersArticleNumberGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = await FindArticleNumbersArticleNumberGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Article Numbers Get a list of all article numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<List<string>>> FindArticleNumbersArticleNumberGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindArticleNumbersArticleNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/article-number", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindArticleNumbersArticleNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Locations Get a list of all spool locations.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> FindLocationsLocationGet(int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = FindLocationsLocationGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Locations Get a list of all spool locations.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ZebraApp.Api.Client.ApiResponse<List<string>> FindLocationsLocationGetWithHttpInfo(int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindLocationsLocationGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/location", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindLocationsLocationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Locations Get a list of all spool locations.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> FindLocationsLocationGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = await FindLocationsLocationGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Locations Get a list of all spool locations.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<List<string>>> FindLocationsLocationGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindLocationsLocationGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/location", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindLocationsLocationGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Lot Numbers Get a list of all lot numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> FindLotNumbersLotNumberGet(int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = FindLotNumbersLotNumberGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Lot Numbers Get a list of all lot numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ZebraApp.Api.Client.ApiResponse<List<string>> FindLotNumbersLotNumberGetWithHttpInfo(int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindLotNumbersLotNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/lot-number", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindLotNumbersLotNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Lot Numbers Get a list of all lot numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> FindLotNumbersLotNumberGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = await FindLotNumbersLotNumberGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Lot Numbers Get a list of all lot numbers.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<List<string>>> FindLotNumbersLotNumberGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindLotNumbersLotNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/lot-number", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindLotNumbersLotNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Materials Get a list of all filament materials.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> FindMaterialsMaterialGet(int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = FindMaterialsMaterialGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Materials Get a list of all filament materials.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ZebraApp.Api.Client.ApiResponse<List<string>> FindMaterialsMaterialGetWithHttpInfo(int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindMaterialsMaterialGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/material", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindMaterialsMaterialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Materials Get a list of all filament materials.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> FindMaterialsMaterialGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<List<string>> localVarResponse = await FindMaterialsMaterialGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Materials Get a list of all filament materials.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<List<string>>> FindMaterialsMaterialGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OtherApi.FindMaterialsMaterialGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/material", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindMaterialsMaterialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Location Rename a spool location. All spools in this location will be moved to the new location.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string RenameLocationLocationLocationPatch(string location, RenameLocationBody renameLocationBody, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<string> localVarResponse = RenameLocationLocationLocationPatchWithHttpInfo(location, renameLocationBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename Location Rename a spool location. All spools in this location will be moved to the new location.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public ZebraApp.Api.Client.ApiResponse<string> RenameLocationLocationLocationPatchWithHttpInfo(string location, RenameLocationBody renameLocationBody, int operationIndex = 0)
        {
            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'location' when calling OtherApi->RenameLocationLocationLocationPatch");
            }

            // verify the required parameter 'renameLocationBody' is set
            if (renameLocationBody == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'renameLocationBody' when calling OtherApi->RenameLocationLocationLocationPatch");
            }

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("location", ZebraApp.Api.Client.ClientUtils.ParameterToString(location)); // path parameter
            localVarRequestOptions.Data = renameLocationBody;

            localVarRequestOptions.Operation = "OtherApi.RenameLocationLocationLocationPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<string>("/location/{location}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameLocationLocationLocationPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename Location Rename a spool location. All spools in this location will be moved to the new location.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> RenameLocationLocationLocationPatchAsync(string location, RenameLocationBody renameLocationBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<string> localVarResponse = await RenameLocationLocationLocationPatchWithHttpInfoAsync(location, renameLocationBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename Location Rename a spool location. All spools in this location will be moved to the new location.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location"></param>
        /// <param name="renameLocationBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<string>> RenameLocationLocationLocationPatchWithHttpInfoAsync(string location, RenameLocationBody renameLocationBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'location' is set
            if (location == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'location' when calling OtherApi->RenameLocationLocationLocationPatch");
            }

            // verify the required parameter 'renameLocationBody' is set
            if (renameLocationBody == null)
            {
                throw new ZebraApp.Api.Client.ApiException(400, "Missing required parameter 'renameLocationBody' when calling OtherApi->RenameLocationLocationLocationPatch");
            }


            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("location", ZebraApp.Api.Client.ClientUtils.ParameterToString(location)); // path parameter
            localVarRequestOptions.Data = renameLocationBody;

            localVarRequestOptions.Operation = "OtherApi.RenameLocationLocationLocationPatch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<string>("/location/{location}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameLocationLocationLocationPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
