/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ZebraApp.Api.Client;
using ZebraApp.Api.Model;

namespace ZebraApp.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Backup
        /// </summary>
        /// <remarks>
        /// Trigger a database backup. Only applicable for SQLite databases.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BackupResponse</returns>
        BackupResponse BackupBackupPost(int operationIndex = 0);

        /// <summary>
        /// Backup
        /// </summary>
        /// <remarks>
        /// Trigger a database backup. Only applicable for SQLite databases.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BackupResponse</returns>
        ApiResponse<BackupResponse> BackupBackupPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Health
        /// </summary>
        /// <remarks>
        /// Return a health check.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheck</returns>
        HealthCheck HealthHealthGet(int operationIndex = 0);

        /// <summary>
        /// Health
        /// </summary>
        /// <remarks>
        /// Return a health check.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheck</returns>
        ApiResponse<HealthCheck> HealthHealthGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// Return general info about the API.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        Info InfoInfoGet(int operationIndex = 0);

        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// Return general info about the API.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        ApiResponse<Info> InfoInfoGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Backup
        /// </summary>
        /// <remarks>
        /// Trigger a database backup. Only applicable for SQLite databases.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupResponse</returns>
        System.Threading.Tasks.Task<BackupResponse> BackupBackupPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Backup
        /// </summary>
        /// <remarks>
        /// Trigger a database backup. Only applicable for SQLite databases.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BackupResponse>> BackupBackupPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Health
        /// </summary>
        /// <remarks>
        /// Return a health check.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheck</returns>
        System.Threading.Tasks.Task<HealthCheck> HealthHealthGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Health
        /// </summary>
        /// <remarks>
        /// Return a health check.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheck)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheck>> HealthHealthGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// Return general info about the API.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        System.Threading.Tasks.Task<Info> InfoInfoGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Info
        /// </summary>
        /// <remarks>
        /// Return general info about the API.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        System.Threading.Tasks.Task<ApiResponse<Info>> InfoInfoGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private ZebraApp.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                new ZebraApp.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(ZebraApp.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(ZebraApp.Api.Client.ISynchronousClient client, ZebraApp.Api.Client.IAsynchronousClient asyncClient, ZebraApp.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ZebraApp.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ZebraApp.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ZebraApp.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZebraApp.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Backup Trigger a database backup. Only applicable for SQLite databases.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BackupResponse</returns>
        public BackupResponse BackupBackupPost(int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<BackupResponse> localVarResponse = BackupBackupPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Backup Trigger a database backup. Only applicable for SQLite databases.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BackupResponse</returns>
        public ZebraApp.Api.Client.ApiResponse<BackupResponse> BackupBackupPostWithHttpInfo(int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.BackupBackupPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BackupResponse>("/backup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BackupBackupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Backup Trigger a database backup. Only applicable for SQLite databases.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BackupResponse</returns>
        public async System.Threading.Tasks.Task<BackupResponse> BackupBackupPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<BackupResponse> localVarResponse = await BackupBackupPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Backup Trigger a database backup. Only applicable for SQLite databases.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BackupResponse)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<BackupResponse>> BackupBackupPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.BackupBackupPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BackupResponse>("/backup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BackupBackupPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health Return a health check.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheck</returns>
        public HealthCheck HealthHealthGet(int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<HealthCheck> localVarResponse = HealthHealthGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health Return a health check.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheck</returns>
        public ZebraApp.Api.Client.ApiResponse<HealthCheck> HealthHealthGetWithHttpInfo(int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.HealthHealthGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HealthCheck>("/health", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthHealthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health Return a health check.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheck</returns>
        public async System.Threading.Tasks.Task<HealthCheck> HealthHealthGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<HealthCheck> localVarResponse = await HealthHealthGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health Return a health check.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheck)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<HealthCheck>> HealthHealthGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.HealthHealthGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HealthCheck>("/health", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HealthHealthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Info Return general info about the API.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Info</returns>
        public Info InfoInfoGet(int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Info> localVarResponse = InfoInfoGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Info Return general info about the API.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Info</returns>
        public ZebraApp.Api.Client.ApiResponse<Info> InfoInfoGetWithHttpInfo(int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.InfoInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Info>("/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Info Return general info about the API.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Info</returns>
        public async System.Threading.Tasks.Task<Info> InfoInfoGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Info> localVarResponse = await InfoInfoGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Info Return general info about the API.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Info)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Info>> InfoInfoGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.InfoInfoGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Info>("/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InfoInfoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
