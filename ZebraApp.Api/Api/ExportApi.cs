/*
 * Spoolman REST API v1
 *
 *      REST API for Spoolman.      The API is served on the path `/api/v1/`.      Some endpoints also serve a websocket on the same path. The websocket is used to listen for changes to the data     that the endpoint serves. The websocket messages are JSON objects. Additionally, there is a root-level websocket     endpoint that listens for changes to any data in the database.     
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ZebraApp.Api.Client;
using ZebraApp.Api.Model;

namespace ZebraApp.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Export Filaments
        /// </summary>
        /// <remarks>
        /// Export the list of filaments in various formats. Vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ExportFilamentsExportFilamentsGet(ExportFormat fmt, int operationIndex = 0);

        /// <summary>
        /// Export Filaments
        /// </summary>
        /// <remarks>
        /// Export the list of filaments in various formats. Vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ExportFilamentsExportFilamentsGetWithHttpInfo(ExportFormat fmt, int operationIndex = 0);
        /// <summary>
        /// Export Spools
        /// </summary>
        /// <remarks>
        /// Export the list of spools in various formats. Filament and vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ExportSpoolsExportSpoolsGet(ExportFormat fmt, int operationIndex = 0);

        /// <summary>
        /// Export Spools
        /// </summary>
        /// <remarks>
        /// Export the list of spools in various formats. Filament and vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ExportSpoolsExportSpoolsGetWithHttpInfo(ExportFormat fmt, int operationIndex = 0);
        /// <summary>
        /// Export Vendors
        /// </summary>
        /// <remarks>
        /// Export the list of vendors in various formats.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ExportVendorsExportVendorsGet(ExportFormat fmt, int operationIndex = 0);

        /// <summary>
        /// Export Vendors
        /// </summary>
        /// <remarks>
        /// Export the list of vendors in various formats.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ExportVendorsExportVendorsGetWithHttpInfo(ExportFormat fmt, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Export Filaments
        /// </summary>
        /// <remarks>
        /// Export the list of filaments in various formats. Vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ExportFilamentsExportFilamentsGetAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Filaments
        /// </summary>
        /// <remarks>
        /// Export the list of filaments in various formats. Vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportFilamentsExportFilamentsGetWithHttpInfoAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Export Spools
        /// </summary>
        /// <remarks>
        /// Export the list of spools in various formats. Filament and vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ExportSpoolsExportSpoolsGetAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Spools
        /// </summary>
        /// <remarks>
        /// Export the list of spools in various formats. Filament and vendor data is included.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportSpoolsExportSpoolsGetWithHttpInfoAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Export Vendors
        /// </summary>
        /// <remarks>
        /// Export the list of vendors in various formats.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ExportVendorsExportVendorsGetAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Vendors
        /// </summary>
        /// <remarks>
        /// Export the list of vendors in various formats.
        /// </remarks>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportVendorsExportVendorsGetWithHttpInfoAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExportApi : IExportApiSync, IExportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExportApi : IExportApi
    {
        private ZebraApp.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExportApi(string basePath)
        {
            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                new ZebraApp.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExportApi(ZebraApp.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ZebraApp.Api.Client.Configuration.MergeConfigurations(
                ZebraApp.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ZebraApp.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ExportApi(ZebraApp.Api.Client.ISynchronousClient client, ZebraApp.Api.Client.IAsynchronousClient asyncClient, ZebraApp.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ZebraApp.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ZebraApp.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ZebraApp.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ZebraApp.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ZebraApp.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Export Filaments Export the list of filaments in various formats. Vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ExportFilamentsExportFilamentsGet(ExportFormat fmt, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Object> localVarResponse = ExportFilamentsExportFilamentsGetWithHttpInfo(fmt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Filaments Export the list of filaments in various formats. Vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ZebraApp.Api.Client.ApiResponse<Object> ExportFilamentsExportFilamentsGetWithHttpInfo(ExportFormat fmt, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "fmt", fmt));

            localVarRequestOptions.Operation = "ExportApi.ExportFilamentsExportFilamentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/export/filaments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFilamentsExportFilamentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Filaments Export the list of filaments in various formats. Vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ExportFilamentsExportFilamentsGetAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Object> localVarResponse = await ExportFilamentsExportFilamentsGetWithHttpInfoAsync(fmt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Filaments Export the list of filaments in various formats. Vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Object>> ExportFilamentsExportFilamentsGetWithHttpInfoAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "fmt", fmt));

            localVarRequestOptions.Operation = "ExportApi.ExportFilamentsExportFilamentsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/export/filaments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFilamentsExportFilamentsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Spools Export the list of spools in various formats. Filament and vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ExportSpoolsExportSpoolsGet(ExportFormat fmt, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Object> localVarResponse = ExportSpoolsExportSpoolsGetWithHttpInfo(fmt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Spools Export the list of spools in various formats. Filament and vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ZebraApp.Api.Client.ApiResponse<Object> ExportSpoolsExportSpoolsGetWithHttpInfo(ExportFormat fmt, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "fmt", fmt));

            localVarRequestOptions.Operation = "ExportApi.ExportSpoolsExportSpoolsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/export/spools", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSpoolsExportSpoolsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Spools Export the list of spools in various formats. Filament and vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ExportSpoolsExportSpoolsGetAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Object> localVarResponse = await ExportSpoolsExportSpoolsGetWithHttpInfoAsync(fmt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Spools Export the list of spools in various formats. Filament and vendor data is included.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Object>> ExportSpoolsExportSpoolsGetWithHttpInfoAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "fmt", fmt));

            localVarRequestOptions.Operation = "ExportApi.ExportSpoolsExportSpoolsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/export/spools", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSpoolsExportSpoolsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Vendors Export the list of vendors in various formats.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ExportVendorsExportVendorsGet(ExportFormat fmt, int operationIndex = 0)
        {
            ZebraApp.Api.Client.ApiResponse<Object> localVarResponse = ExportVendorsExportVendorsGetWithHttpInfo(fmt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Vendors Export the list of vendors in various formats.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public ZebraApp.Api.Client.ApiResponse<Object> ExportVendorsExportVendorsGetWithHttpInfo(ExportFormat fmt, int operationIndex = 0)
        {
            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "fmt", fmt));

            localVarRequestOptions.Operation = "ExportApi.ExportVendorsExportVendorsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/export/vendors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportVendorsExportVendorsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Vendors Export the list of vendors in various formats.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ExportVendorsExportVendorsGetAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ZebraApp.Api.Client.ApiResponse<Object> localVarResponse = await ExportVendorsExportVendorsGetWithHttpInfoAsync(fmt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Vendors Export the list of vendors in various formats.
        /// </summary>
        /// <exception cref="ZebraApp.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fmt"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ZebraApp.Api.Client.ApiResponse<Object>> ExportVendorsExportVendorsGetWithHttpInfoAsync(ExportFormat fmt, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            ZebraApp.Api.Client.RequestOptions localVarRequestOptions = new ZebraApp.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ZebraApp.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ZebraApp.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ZebraApp.Api.Client.ClientUtils.ParameterToMultiMap("", "fmt", fmt));

            localVarRequestOptions.Operation = "ExportApi.ExportVendorsExportVendorsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/export/vendors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportVendorsExportVendorsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
